using Developist.Core.Cqrs.Commands;
using Developist.Core.Cqrs.Events;
using Developist.Core.Utilities;

using HR.AnsConnector.Features.Common;
using HR.AnsConnector.Infrastructure;

namespace HR.AnsConnector.Features.Users
{
    public class UserCreated : IEvent
    {
        public UserCreated(ApiResponse<User> createUserApiResponse)
        {
            StatusMessage = createUserApiResponse.GetStatusMessage();
            Success = createUserApiResponse.IsSuccessStatusCode();
            if (Success)
            {
                UserId = createUserApiResponse.Data!.Id;
            }
            else
            {
                ErrorMessage = createUserApiResponse.GetValidationErrorsAsSingleMessage();
            }
        }

        /// <summary>
        /// The unique user id as generated by the server. Set only if <see cref="Success"/> is <c>true</c>.
        /// </summary>
        public int? UserId { get; }
        public bool Success { get; }
        public string StatusMessage { get; }
        public string? ErrorMessage { get; }
    }

    public class UserCreatedHandler : IEventHandler<UserCreated>
    {
        private readonly ICommandDispatcher commandDispatcher;

        public UserCreatedHandler(ICommandDispatcher commandDispatcher)
        {
            this.commandDispatcher = commandDispatcher;
        }

        public async Task HandleAsync(UserCreated e, CancellationToken cancellationToken)
        {
            await commandDispatcher.DispatchAsync(new MarkAsHandled
            {
                Id = e.UserId,
                Success = e.Success,
                StatusMessage = e.StatusMessage,
                ErrorMessage = e.ErrorMessage,
            }, cancellationToken).WithoutCapturingContext();
        }
    }
}
